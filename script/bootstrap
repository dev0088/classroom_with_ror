#!/bin/sh

# Usage: script/boostrap
# Ensures all dependencies are installed locally.

set -e

cd "$(dirname "$0")/.."

# Make sure the system has both rbenv 
# and nodenv installed previously, otherwise we can't
# ensure dependencies install correctly.
if ! [ -f "$(which rbenv)" ]; then
  echo "It looks like you don't have rbenv installed"
  echo "Check out https://github.com/rbenv/rbenv#installation to get it running on your system"

  exit 1
fi

if ! [ -f "$(which nodenv)" ]; then
  echo "It looks like you don't have nodenv installed"
  echo "Check out https://github.com/nodenv/nodenv#installation to get it running on your system"

  exit 1
fi

# Install all the macOS dependencies via the Brewfile
if [ "$(uname -s)" = "Darwin" ]; then
  echo "==> Ensuring Homebrew macOS dependencies..."
  brew update

  brew bootstrap-rbenv-ruby
  brew bootstrap-nodenv-node

  brew bundle check >/dev/null 2>&1 || {
    echo "==> Installing Homebrew dependencies..."
    brew bundle

    brew setup-nginx-conf classroom . config/dev/nginx.conf.erb
    brew services restart nginx
  }
fi

# Install all of our gems if we need to
bundle check 2>&1 || {
  echo "==> Installing gem dependencies..."
  bundle install --local --without production
}

# Install all of our JS dependencies if we need to
./bin/yarn check 2>&1 || {
  echo "==> Installing javascript dependencies..."
  ./bin/yarn install
}

# Make sure docker-compose is installed otherwise
# we won't be able to boot our dependencies like
# postgres or elasticsearch
if ! [ -f "$(which docker-compose)" ]; then
  echo "Docker compose appears to not be installed"
  echo "Check out https://docs.docker.com/compose/install/ to get it running on your system"

  exit 1
fi

./script/docker-services
